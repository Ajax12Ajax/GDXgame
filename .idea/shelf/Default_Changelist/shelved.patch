Index: core/src/com/mygdx/gragdx/game/objects/Test.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.mygdx.gragdx.game.objects;\r\n\r\nimport com.badlogic.gdx.graphics.g2d.SpriteBatch;\r\nimport com.badlogic.gdx.graphics.g2d.TextureRegion;\r\nimport com.mygdx.gragdx.game.Assets;\r\nimport com.mygdx.gragdx.util.Constants;\r\n\r\npublic class Test extends AbstractGameObject {\r\n\r\n    public static final String TAG = Test.class.getName();\r\n\r\n    private final float JUMP_TIME_MAX = 0.3f;\r\n    private final float JUMP_TIME_MIN = 0.1f;\r\n    private final float JUMP_TIME_OFFSET_FLYING = JUMP_TIME_MAX - 0.018f;\r\n\r\n    public enum VIEW_DIRECTION {LEFT, RIGHT}\r\n\r\n    public enum JUMP_STATE {\r\n        GROUNDED, FALLING, JUMP_RISING, JUMP_FALLING\r\n    }\r\n\r\n    private TextureRegion regHead;\r\n\r\n    public VIEW_DIRECTION viewDirection;\r\n\r\n    public float timeJumping;\r\n    public JUMP_STATE jumpState;\r\n\r\n    public boolean hasFeatherPowerup;\r\n    public float timeLeftFeatherPowerup;\r\n\r\n    public Test() {\r\n        init();\r\n    }\r\n\r\n\r\n\r\n    public void init() {\r\n        dimension.set(1, 1);\r\n        regHead = Assets.instance.test.head;\r\n        // Center image on game object\r\n        origin.set(dimension.x / 2, dimension.y / 2);\r\n        // Bounding box for collision detection\r\n        bounds.set(0, 0, dimension.x, dimension.y);\r\n        // Set physics values\r\n        terminalVelocity.set(3.0f, 4.0f);\r\n        friction.set(12.0f, 0.0f);\r\n        acceleration.set(0.0f, -25.0f);\r\n        // View direction\r\n        viewDirection = VIEW_DIRECTION.RIGHT;\r\n        // Jump state\r\n        jumpState = JUMP_STATE.FALLING;\r\n        timeJumping = 0;\r\n        // Power-ups\r\n        hasFeatherPowerup = false;\r\n        timeLeftFeatherPowerup = 0;\r\n    }\r\n    \r\n    public void render(float deltaTime) {\r\n        super.update(deltaTime);\r\n        if (velocity.x != 0) {\r\n            viewDirection = velocity.x < 0 ? VIEW_DIRECTION.LEFT :\r\n                    VIEW_DIRECTION.RIGHT;\r\n        }\r\n        if (timeLeftFeatherPowerup > 0) {\r\n            timeLeftFeatherPowerup -= deltaTime;\r\n            if (timeLeftFeatherPowerup < 0) {\r\n                // disable power-up\r\n                timeLeftFeatherPowerup = 0;\r\n                setFeatherPowerup(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void updateMotionY (float deltaTime) {\r\n        switch (jumpState) {\r\n            case GROUNDED:\r\n                jumpState = JUMP_STATE.FALLING;\r\n                break;\r\n            case JUMP_RISING:\r\n                // Keep track of jump time\r\n                timeJumping += deltaTime;\r\n                // Jump time left?\r\n                if (timeJumping <= JUMP_TIME_MAX) {\r\n                    // Still jumping\r\n                    velocity.y = terminalVelocity.y;\r\n                }\r\n                break;\r\n            case FALLING:\r\n                break;\r\n            case JUMP_FALLING:\r\n                // Add delta times to track jump time\r\n                timeJumping += deltaTime;\r\n                // Jump to minimal height if jump key was pressed too short\r\n                if (timeJumping > 0 && timeJumping <= JUMP_TIME_MIN) {\r\n                    // Still jumping\r\n                    velocity.y = terminalVelocity.y;\r\n                }\r\n        }\r\n        if (jumpState != JUMP_STATE.GROUNDED)\r\n            super.updateMotionY(deltaTime);\r\n    }\r\n\r\n    @Override\r\n    public void render (SpriteBatch batch) {\r\n        TextureRegion reg = null;\r\n        // Set special color when game object has a feather power-up\r\n        if (hasFeatherPowerup) {\r\n            batch.setColor(1.0f, 0.8f, 0.0f, 1.0f);\r\n        }\r\n        // Draw image\r\n        reg = regHead;\r\n        batch.draw(reg.getTexture(), position.x, position.y, origin.x,\r\n                origin.y, dimension.x, dimension.y, scale.x, scale.y, rotation,\r\n                reg.getRegionX(), reg.getRegionY(), reg.getRegionWidth(),\r\n                reg.getRegionHeight(), viewDirection == VIEW_DIRECTION.LEFT,\r\n                false);\r\n        // Reset color to white\r\n        batch.setColor(1, 1, 1, 1);\r\n    }\r\n\r\n    public void setJumping(boolean jumpKeyPressed) {\r\n        switch (jumpState) {\r\n            case GROUNDED: // Character is standing on a platform\r\n                if (jumpKeyPressed) {\r\n                    // Start counting jump time from the beginning\r\n                    timeJumping = 0;\r\n                    jumpState = JUMP_STATE.JUMP_RISING;\r\n                }\r\n                break;\r\n            case JUMP_RISING: // Rising in the air\r\n                if (!jumpKeyPressed)\r\n                    jumpState = JUMP_STATE.JUMP_FALLING;\r\n                break;\r\n            case FALLING:// Falling down\r\n            case JUMP_FALLING: // Falling down after jump\r\n                if (jumpKeyPressed && hasFeatherPowerup) {\r\n                    timeJumping = JUMP_TIME_OFFSET_FLYING;\r\n                    jumpState = JUMP_STATE.JUMP_RISING;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    ;\r\n\r\n    public void setFeatherPowerup(boolean pickedUp) {\r\n        hasFeatherPowerup = pickedUp;\r\n        if (pickedUp) {\r\n            timeLeftFeatherPowerup =\r\n                    Constants.ITEM_FEATHER_POWERUP_DURATION;\r\n        }\r\n    }\r\n\r\n    ;\r\n\r\n    public boolean hasFeatherPowerup() {\r\n        return hasFeatherPowerup && timeLeftFeatherPowerup > 0;\r\n    }\r\n\r\n    ;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- core/src/com/mygdx/gragdx/game/objects/Test.java	(revision e0f2bf77f32c0d4aa3c92b91fa81793d6499de87)
+++ core/src/com/mygdx/gragdx/game/objects/Test.java	(date 1601757464301)
@@ -36,7 +36,7 @@
 
 
     public void init() {
-        dimension.set(1, 1);
+        dimension.set(0.7f, 1);
         regHead = Assets.instance.test.head;
         // Center image on game object
         origin.set(dimension.x / 2, dimension.y / 2);
